package demoDraw;


import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.sql.Time;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JPanel;
import javax.swing.Timer;

/*
 * To change this template, choose Tools | Templates and open the template in
 * the editor.
 */
/**
 *
 * @author vnam
 */
public class paint_car2 extends JPanel {

    private int x = 50, y = 50, w = 10, h = 5;
    int d = 10;
    private int nPic = 16;
    private int iCurrentPic = 0;
    String[] aFileNames = {
        "imgs/Car-08.gif",
        "imgs/Car-09.gif",
        "imgs/Car-10.gif",
        "imgs/Car-11.gif",
        "imgs/Car-12.gif",
        "imgs/Car-13.gif",
        "imgs/Car-14.gif",
        "imgs/Car-15.gif",
        "imgs/Car-00.gif",
        "imgs/Car-01.gif",
        "imgs/Car-02.gif",
        "imgs/Car-03.gif",
        "imgs/Car-04.gif",
        "imgs/Car-05.gif",
        "imgs/Car-06.gif",
        "imgs/Car-07.gif"
    };
    BufferedImage imgs[] = new BufferedImage[nPic];
    int tCount = 1;
    private Timer tControl;
    // constructor function

    public paint_car2() {
        //load pics
        try {
            for (int i = 0; i < nPic; i++) {

                imgs[i] = ImageIO.read(new File(aFileNames[i]));

            }
        } catch (IOException ex) {
            Logger.getLogger(paint_car2.class.getName()).log(Level.SEVERE, null, ex);
        }
        //ImageIO.read
        tControl = new Timer(400, new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                //throw new UnsupportedOperationException("Not supported yet.");
                if (tCount <= 5) {
                    d = 10;
                    x = x + d;
                    tCount++;
                }
               
                if (5 < tCount && tCount < 10) {
                    x = x + d;
                    y = y + 20 - d;


                    if (x > getWidth()) {
                        x = -w;
                    }
                    iCurrentPic = iCurrentPic + 1;
                    

                    d--;
                    if (d < 0) {
                        d = 10;
                    }
                    tCount++;
                }
                 if (10 <= tCount && tCount <= 15) {
                    d = 10;
                    y = y + d;
                    tCount++;
                 }
                 if (15 < tCount && tCount < 20) {
                    x = x - d;
                    y = y + 20 - d;


                    if (x > getWidth()) {
                        x = -w;
                    }
                    iCurrentPic = iCurrentPic + 1;
                    

                    d--;
                    if (d < 0) {
                        d = 10;
                    }
                    tCount++;
                }
                 
                 if (20 <= tCount && tCount <= 25) {
                    d = 10;
                    x = x - d;
                    tCount++;
                 }
                 
                  if (25 < tCount && tCount < 30) {
                    x = x - d;
                    y = y - 20 + d;


                    if (x > getWidth()) {
                        x = -w;
                    }
                    iCurrentPic = iCurrentPic + 1;
                    

                    d--;
                    if (d < 0) {
                        d = 10;
                    }
                    tCount++;
                }
                 
                 if (30 <= tCount && tCount <= 35) {
                    d = 10;
                    y = y - d;
                    tCount++;
                 }
                 
                 if (35 < tCount && tCount < 40) {
                    x = x + d;
                    y = y - 20 + d;


                    if (x > getWidth()) {
                        x = -w;
                    }
                    iCurrentPic = iCurrentPic + 1;
                    

                    d--;
                    if (d < 0) {
                        d = 10;
                    }
                    tCount++;
                }
                 if( tCount>=40){
                     tCount=0;
                 }
                 if (iCurrentPic >= nPic) {
                        iCurrentPic = 0;
                    }
                 
                 
                repaint();
            }
        });
    }

    public void start() {
        tControl.start();
    }

    public void stop() {
        tControl.stop();
    }

    // drawing function
    public void paint(Graphics g) {
        super.paint(g);
        //g.setColor(Color.red);
        //g.drawRect(x, y, w, h);
        g.drawImage(imgs[iCurrentPic], x, y, this);
    }
}
